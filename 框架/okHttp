基本流程:
//Builder模式建造一个request
Request req=new Request.Builder()
                        .url(url)
                        .build();
//构造一个HttpClient
OkHttpClient client=new OkHttpClient();
//发送请求
client.newCall(req)
        .enqueue(new Callback() {
            //获得服务器返回的Response数据
            @Override
            public void onResponse(Call arg0, Response arg1) throws IOException {

            }

            @Override
            public void onFailure(Call arg0, IOException arg1) {
                // TODO Auto-generated method stub

            }
        });

来看newCall(req):
public Call newCall(Request request) {
    return new RealCall(this, request, false /* for web socket */);
  }
实际上RealCall包装了Request和OKHttpClient这两个类的实例。使得后面的方法中可以很方便的使用这两者。

再看enqueue:
会把callBack包装成AsyncCall, AsyncCall应用Runnable接口(方便开线程),是RealCall内部类, 
把asyncCall交给OKHttpClient处理
然后根据情况,可以立即执行,也可以放入等待队列
执行就要用到Interceptor, Interceptor相当于一个装饰者, realCall经过多个装饰者,最后发到网络上; 返回结果倒序进过多个装饰者,之后调用回调方法
