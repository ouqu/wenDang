一,基础:
Subscriber<String> 
   public void onNext(String s)
   public void onCompleted()
   public void onError(Throwable e) 
               onStart()           //已订阅,但未开始,调用

Observable observable = Observable.create(new Observable.OnSubscribe<String>() {
    @Override
    public void call(Subscriber<? super String> subscriber) {
        subscriber.onNext("Hello");
        subscriber.onNext("Hi");
        subscriber.onNext("Aloha");
        subscriber.onCompleted();
    }
});
//当有订阅者订阅的时候, 就会把订阅者传进来, 执行这个方法
Observable observable = Observable.just("Hello", "Hi", "Aloha");
String[] words = {"Hello", "Hi", "Aloha"};
Observable observable = Observable.from(words);

Action<T> 接口
public void call(T)
observable.subscribe(onNextAction, onErrorAction, onCompletedAction);
//三个依次为onNext,onError,onComplete; 会自动生成subscriber,三个方法分别对应
//也可省略

二:线程切换
    Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler。
    Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。
    Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。
    Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。
    另外， Android 还有一个专用的 AndroidSchedulers.mainThread()，它指定的操作将在 Android 主线程运行。


Observable.just(1, 2, 3, 4)
    .subscribeOn(Schedulers.io()) // 指定 subscribe() 发生在 IO 线程
    .observeOn(AndroidSchedulers.mainThread()) // 指定 Subscriber 的回调发生在主线程

三, 变换
Observable.just("images/logo.png") // 输入类型 String
    .map(new Func1<String, Bitmap>() {  //第一个T是原始数据,第二个T是转换后的数据
        @Override
        public Bitmap call(String filePath) { // 参数类型 String
            return getBitmapFromPath(filePath); // 返回类型 Bitmap
        }
    })
    .subscribe(new Action1<Bitmap>() {
        @Override
        public void call(Bitmap bitmap) { // 参数类型 Bitmap
            showBitmap(bitmap);
        }
    });

observable.flatMap(new Func1<Student, Observable<Course>>() {
        @Override
        public Observable<Course> call(Student student) {
            return Observable.from(student.getCourses());
        }
    }))   //concatMap与flatMap非常类似, concatMap能保持顺序, 而flatMap不行

四:
observable.doOnNext(Action ) //在每一次调用subscriber的onNext方法前调用
filter(charSequence -> !TextUtils.isEmpty(charSequence))  //传入一个参数,调用方法,返回true表示继续传递

五: subject
BehaviorSubject<T>
一个observable, 当调用subscribe方法时, 会发射调用之前的一个item
栗子:
BehaviorSubject<Object> subject = BehaviorSubject.create("default");
  subject.onNext("zero");
  subject.onNext("one");
  subject.subscribe(observer);
  subject.onNext("two");
  subject.onNext("three");
observer会收到one two three
构造: BehaviourSubject.create() / .create(T defaultValue)

PublishSubject<T>
一个observable, 当调用subscribe方法时, 观察者会接收到注册之后的所有item
PublishSubject<Object> subject = PublishSubject.create("default");
  subject.onNext("zero");
  subject.onNext("one");
  subject.subscribe(observer);
  subject.onNext("two");
  subject.onNext("three");
observer收到 two three
构造: PublishSubject.create()
