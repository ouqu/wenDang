EasyViewHolder<V> extends RecyclerView.ViewHolder　
　　　　　　　　　　　　　　　　　　implements View.OnLongClickListener, View.OnClickListener
１我们知道　ViewHolder的构造方法是传入一个View,　而EasyViewHolder的构造方法传入了Context context, ViewGroup parent, int layoutId，内部会调用LayoutInflater,　就是说简化了构造．
注意:构造方法并没有使用ButterKnife, 所以继承的时候要自己写ButterKnife.bind(this, itemView).
这个context就是构造easyRecyclerAdapter时传入的context.
２构造方法还会为itemView设置OnClickListener和OnLongClickListener.
现在看一下内部定义的接口:
public interface OnItemClickListener {
    void onItemClick(final int position, View view);
  }
再看看onClick方法:
@Override public void onClick(View v) {
    if (itemClickListener == null) return;
    itemClickListener.onItemClick(getAdapterPosition(), v);
    //itemClickListener, 就是上面那个接口的实例
  }
可以看出, 接口里的position参数, 就是点击的viewHolder调用getAdapterPosition得到的.
就是说, 想处理viewHolder的点击事件, 只需实现那个接口.
3 还有一个抽象方法 
public abstract void bindTo(int position, V value);
这个方法会在viewHolder绑定数据的时候调用.

接下来看一下BaseEasyViewHolderFactory类
这个类负责创建viewHolder的.
内部变量:
  private Map<Class, Class<? extends EasyViewHolder>> boundViewHolders = new HashMap<>();
  private List<Class> valueClassTypes = new ArrayList<>();
这些变量存储的是value和viewHolder的对应关系.

bind方法:
 void bind(Class valueClass, Class<? extends EasyViewHolder> viewHolder) {
    valueClassTypes.add(valueClass);
    boundViewHolders.put(valueClass, viewHolder);
  }
就是把对应关系保存起来
还有itemViewType方法, 传入任意一个对象, 通过这个对象所属的类, 找到对应的index
重点是create方法, 这个方法会根据传入的viewType, 找到对应的viewHolder, 然后使用反射构造出viewHolder.
注意: 反射用的构造方法的参数是 Context, ViewGroup. 所以自己写的easyViewHolder一定要有这个构造方法.

总的来看, 这个ViewHolderFactory通过保存value和viewHolder的对应关系, 使用反射构造出正确的viewHolder.
这样可以方便地实现多种viewType.


EasyRecyclerAdapter extends RecyclerView.Adapter<EasyViewHolder>:
内部变量:
private List<Object> dataList = new ArrayList<>(); //Object说明可以放任何数据
有好几个构造方法, 我们来看常用的那个:
public EasyRecyclerAdapter(Context context, Class valueClass,
      Class<? extends EasyViewHolder> easyViewHolderClass) {
    this(context);
    bind(valueClass, easyViewHolderClass);
  }

  public EasyRecyclerAdapter(Context context) {
    this(new BaseEasyViewHolderFactory(context));
  }
这个构造方法会 构造出ViewHolderFactory, 那个bind方法其实就是调用factory的bind方法.

现在来看重写的方法
@Override public int getItemViewType(int position) {
    return viewHolderFactory.itemViewType(dataList.get(position));
  }
@Override public EasyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
    EasyViewHolder easyViewHolder = viewHolderFactory.create(viewType, parent);
    bindListeners(easyViewHolder);
    return easyViewHolder;
  }
可以看出, 获取指定位置的数据的类型, 就可以用factory构造出viewHolder了.
bindListeners方法就是把 EasyViewHolder的那个接口的实例发送给viewHolder.

onBindViewHolder
就是调用了easyViewHolder的bindTo方法.

最后改变数据: 
提供了常用的改变数据方法, 其实就是修改dataList, 然后调用notifyXXXXX方法. 
比较简单, 就不贴源码了

EasyRecyclerAdapter对一些常用操作进行了封装, 方便使用.

