在action_up时候，会计算当前速度，再看水平和竖直能否滑动，如果小于最小速度，不滑动; 当然也有最大速度的限制
最终调用到ViewFlinger的fling方法
fling(int startX, int startY, int velocityX, int velocityY,
            int minX, int maxX, int minY, int maxY)
startx starty都是0
velocityx y 就是速度 ，如果某个方向不能滑动 那就是0
minx等等都是integer.max/min

然后调用了OverScroller的fling方法，多了2个参数int overX, int overY，都是0
overScroller里面有2个成员，都是SplineOverScroller类的，叫scrollerX和scrollerY,分别控制x和y方向的scroll
在fling里面，进一步调用这2个scroller的fling方法，
fling(int start, int velocity, int min, int max, int over) {
    //      0          速度        minvalue   maxvalue   0
            mOver = over;
            mFinished = false;
            mCurrVelocity = mVelocity = velocity;
            mDuration = mSplineDuration = 0;
            mStartTime = AnimationUtils.currentAnimationTimeMillis();
            mCurrentPosition = mStart = start;
            mState = SPLINE;
            double totalDistance = 0.0;
开始就是保存值
第一个计算，计算duration，保存在mDuration，mSplineDuration：
   就是根据速度，再进行log,e.....运算得到
第二个计算，计算distance，保存在mSplineDistance
   根据速度算出，然后 mFinal = start + mSplineDistance;
fling完成，其实就是计算duration和distance

进入ViewFling的run之前，先看看RecyclerView的smoothScrollToPosition
里面就是调用了layoutManager的同名方法，我们看LinearManager
linearManager就是构造了LinearSmoothScroller，设置了targetPosition，然后作为参数调用startSmoothScroll方法
这个方法会先停止当前的smoothScroller，然后再调用新smoothScroller的start方法
start方法：
设置变量    mRecyclerView.mState.mTargetPosition = mTargetPosition;
            mRunning = true;
            mPendingInitialRun = true;
然后mTargetView = findViewByPosition(getTargetPosition());
最后调用postOnAnimation


之后给Choreographer设置animation回调，ViewFling实现了Runnable接口
来看run方法：
首先overScroller.computeScroll()
具体计算还是交给scrollerX和y, 
ScrollerX和Y是SplineOverScroller，有静态数组SPLINE_POSITION，有101个元素，最小0,最大1. 增长特点是先快后慢，类似于sin函数前半部分
开始计算了，通过AnimationUtils获取当前时间，和开始时间，duration比较，得到已经进行的百分比(就是百分之多少)，通过这个多少可以从SPLINE_POSITION表中查到对应的值，使用微元法近似出斜率，再乘以总distance除以总duration，再乘以1000,就得到当前速度了
然后当前距离(currentPosition)，近似就是从表里得到的数值 再乘以总distance
可以看出，速度是逐渐变慢的(因为斜率在变小)，距离的增加也会越来越慢
大概就是这样

回到run方法，computeScrollOffset完了之后，就可以得到currentPosition，再和上一次的滑动距离比较（mLastFlingX，mLastFlingY）就可以得到这次应该滑动多少
滑动就调用layoutManager的scroll方法



